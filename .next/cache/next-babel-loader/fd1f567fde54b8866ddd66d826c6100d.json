{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\selab-next\\\\components\\\\reactScrollCollision.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { PureComponent } from 'react';\n\nclass ScrollCollision extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      allBlocks: null,\n      blockClass: null,\n      style: {\n        position: 'absolute',\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0'\n      },\n      originOuter: 0,\n      cloneOuter: 0,\n      base: 100,\n      element: {\n        top: 0,\n        bottom: 0,\n        height: 0\n      }\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const blocks = document.querySelectorAll('[data-clippath]');\n      this.updateElement();\n      this.setState(_objectSpread({}, this.state, {\n        allBlocks: blocks,\n        cloneOuter: this.state.base\n      }));\n      window.addEventListener(\"scroll\", this.handleScroll);\n    });\n\n    _defineProperty(this, \"componentDidUpdate\", () => {\n      this.updateElement();\n    });\n\n    _defineProperty(this, \"handleScroll\", event => {\n      this.testCollision();\n    });\n\n    _defineProperty(this, \"testCollision\", () => {\n      const {\n        allBlocks,\n        element\n      } = _objectSpread({}, this.state);\n\n      for (let i = 0; i < allBlocks.length; i++) {\n        const block = this.getBlockInfos(allBlocks[i]);\n        let newOrigin = 0;\n        let newClone = 0;\n\n        if (element.bottom >= block.top && element.top <= block.top && this.isInBoundaries()) {\n          newOrigin = block.top - element.bottom;\n          newClone = block.top - element.top;\n          return this.updateOverlay(newOrigin, newClone, block.class);\n        }\n\n        if (element.bottom >= block.bottom && element.top <= block.bottom && this.isInBoundaries()) {\n          newOrigin = block.bottom - element.top;\n          newClone = block.bottom - element.bottom;\n          return this.updateOverlay(newOrigin, newClone, block.class);\n        }\n\n        if (element.top > block.top && element.bottom < block.bottom) return this.updateOverlay(-110, 0, block.class);\n      }\n\n      ;\n      return this.updateOverlay(0, 110, null);\n    });\n\n    _defineProperty(this, \"updateElement\", () => {\n      const newElem = this.getBlockInfos(this.wrapperRef.current);\n\n      if (this.state.element.top !== newElem.top || this.state.element.bottom !== newElem.bottom) {\n        const element = {\n          top: newElem.top,\n          bottom: newElem.bottom,\n          height: newElem.bottom - newElem.top\n        };\n        this.setState(_objectSpread({}, this.state, {\n          element: element\n        }));\n      }\n    });\n\n    _defineProperty(this, \"updateOverlay\", (origin, clone, blockClass) => {\n      const tempOrigin = this.getPercent(origin);\n      const tempClone = this.getPercent(clone);\n      this.setState(_objectSpread({}, this.state, {\n        blockClass: blockClass,\n        originOuter: tempOrigin,\n        cloneOuter: tempClone\n      }));\n    });\n\n    _defineProperty(this, \"isInBoundaries\", () => {\n      const {\n        originOuter,\n        cloneOuter,\n        base\n      } = _objectSpread({}, this.state);\n\n      return originOuter <= base && originOuter >= -base && cloneOuter <= base && cloneOuter >= -base;\n    });\n\n    _defineProperty(this, \"getPercent\", value => {\n      const {\n        base\n      } = _objectSpread({}, this.state);\n\n      let percent = value * base / this.state.element.height;\n      if (percent > base) percent = base;else if (percent < -base) percent = -base;\n      return percent;\n    });\n\n    _defineProperty(this, \"getBlockInfos\", elem => {\n      const position = elem.getBoundingClientRect();\n      const blockClass = elem.dataset ? elem.dataset.clippath : null;\n      const element = {\n        top: position.top,\n        bottom: position.bottom,\n        class: blockClass\n      };\n      return element;\n    });\n\n    this.wrapperRef = React.createRef();\n  }\n\n  render() {\n    const {\n      className,\n      children,\n      style\n    } = _objectSpread({}, this.props);\n\n    return __jsx(\"div\", {\n      className: \"clippath-wrapper \" + className,\n      ref: this.wrapperRef,\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"clippath-origin\",\n      style: _objectSpread({}, this.state.style, {\n        overflow: 'hidden',\n        transform: \"translateY(\" + this.state.originOuter + \"%)\"\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"clippath-inner\",\n      style: _objectSpread({}, this.state.style, {\n        overflow: 'auto',\n        transform: \"translateY(\" + -this.state.originOuter + \"%)\"\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, children))), __jsx(\"div\", {\n      className: \"clippath-clone \" + this.state.blockClass,\n      style: _objectSpread({}, this.state.style, {\n        overflow: 'hidden',\n        transform: \"translateY(\" + this.state.cloneOuter + \"%)\"\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"clippath-inner\",\n      style: _objectSpread({}, this.state.style, {\n        overflow: 'auto',\n        transform: \"translateY(\" + -this.state.cloneOuter + \"%)\"\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, children))));\n  }\n\n}\n\nexport default ScrollCollision;","map":{"version":3,"sources":["D:/selab-next/components/reactScrollCollision.js"],"names":["React","PureComponent","ScrollCollision","constructor","props","allBlocks","blockClass","style","position","top","left","right","bottom","originOuter","cloneOuter","base","element","height","blocks","document","querySelectorAll","updateElement","setState","state","window","addEventListener","handleScroll","event","testCollision","i","length","block","getBlockInfos","newOrigin","newClone","isInBoundaries","updateOverlay","class","newElem","wrapperRef","current","origin","clone","tempOrigin","getPercent","tempClone","value","percent","elem","getBoundingClientRect","dataset","clippath","createRef","render","className","children","overflow","transform"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nclass ScrollCollision extends PureComponent {\r\n    constructor (props){\r\n        super(props);\r\n        this.wrapperRef = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        allBlocks: null,\r\n        blockClass: null,\r\n        style:{\r\n            position: 'absolute',\r\n            top: '0',\r\n            left: '0',\r\n            right: '0',\r\n            bottom: '0'\r\n        },\r\n        originOuter: 0,\r\n        cloneOuter: 0,\r\n        base: 100,\r\n        element:{\r\n            top: 0,\r\n            bottom: 0,\r\n            height: 0\r\n        }\r\n    }\r\n  \r\n    componentDidMount = () => {\r\n        const blocks = document.querySelectorAll('[data-clippath]');\r\n        this.updateElement();\r\n \r\n        this.setState({\r\n            ...this.state,\r\n            allBlocks: blocks,\r\n            cloneOuter: this.state.base\r\n        });\r\n\r\n        window.addEventListener(\"scroll\", this.handleScroll);\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        this.updateElement();\r\n    }\r\n\r\n    handleScroll = (event) => {\r\n        \r\n        this.testCollision();\r\n    }\r\n\r\n    testCollision = () => {\r\n        const {allBlocks, element} = {...this.state};\r\n        for (let i = 0; i < allBlocks.length; i++) {\r\n            const block = this.getBlockInfos(allBlocks[i]);\r\n            let newOrigin = 0;\r\n            let newClone = 0;\r\n\r\n            if (element.bottom >= block.top && element.top <= block.top && this.isInBoundaries()){\r\n                newOrigin =  block.top - element.bottom;\r\n                newClone = block.top - element.top;\r\n                return this.updateOverlay(newOrigin, newClone, block.class);\r\n            }\r\n\r\n            if (element.bottom >= block.bottom && element.top <= block.bottom && this.isInBoundaries()) {\r\n                newOrigin = block.bottom - element.top;\r\n                newClone = block.bottom - element.bottom;\r\n                return this.updateOverlay(newOrigin, newClone, block.class);\r\n            }\r\n\r\n            if (element.top > block.top && element.bottom < block.bottom) return this.updateOverlay(-110, 0, block.class);\r\n        };\r\n\r\n        return this.updateOverlay(0,110,null);\r\n\r\n    }\r\n\r\n    updateElement = () => {\r\n        const newElem = this.getBlockInfos(this.wrapperRef.current);\r\n        if (this.state.element.top !== newElem.top || this.state.element.bottom !== newElem.bottom) {\r\n            const element = {\r\n                top: newElem.top,\r\n                bottom: newElem.bottom,\r\n                height: newElem.bottom - newElem.top\r\n            };\r\n            this.setState({\r\n                ...this.state,\r\n                element: element\r\n            });\r\n        }\r\n    }\r\n\r\n    updateOverlay = (origin, clone, blockClass) => {\r\n        const tempOrigin = this.getPercent(origin);\r\n        const tempClone = this.getPercent(clone);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            blockClass: blockClass,\r\n            originOuter: tempOrigin,\r\n            cloneOuter: tempClone\r\n        });\r\n    }\r\n\r\n    isInBoundaries = () => {\r\n        const {originOuter, cloneOuter, base} = {...this.state};\r\n        return originOuter <= base && originOuter >= - base && cloneOuter <= base && cloneOuter >= - base\r\n    }\r\n\r\n    getPercent = (value) => {\r\n        const {base} = {...this.state};\r\n        let percent = (value * base) / this.state.element.height;\r\n        if (percent > base) percent = base;\r\n        else if (percent < - base) percent = - base;\r\n        return percent;\r\n    }\r\n\r\n    getBlockInfos = (elem) => {\r\n        const position = elem.getBoundingClientRect();\r\n        const blockClass = elem.dataset? elem.dataset.clippath : null;\r\n        const element = {top: position.top, bottom: position.bottom, class: blockClass};\r\n      \r\n        return element;\r\n    }\r\n\r\n    render() {\r\n        \r\n        const {className, children, style} = {...this.props};\r\n        \r\n        return (\r\n            <div className={\"clippath-wrapper \" + className} ref={this.wrapperRef} style={style}>\r\n                <div className=\"clippath-origin\" style={{...this.state.style, overflow: 'hidden', transform: \"translateY(\" + this.state.originOuter +  \"%)\" }}>\r\n                    <div className=\"clippath-inner\" style={{...this.state.style, overflow: 'auto', transform: \"translateY(\" + - this.state.originOuter +  \"%)\" }}>\r\n                        <div>{children}</div>\r\n                    </div>\r\n                </div>\r\n                <div className={\"clippath-clone \" + this.state.blockClass} style={{...this.state.style, overflow: 'hidden', transform: \"translateY(\" + this.state.cloneOuter +  \"%)\" }}>\r\n                    <div className=\"clippath-inner\" style={{...this.state.style, overflow: 'auto', transform: \"translateY(\" + - this.state.cloneOuter +  \"%)\" }}>\r\n                        <div>{children}</div>\r\n                    </div>\r\n                </div>        \r\n            </div> \r\n        );\r\n    }\r\n}\r\n\r\nexport default ScrollCollision;"]},"metadata":{},"sourceType":"module"}