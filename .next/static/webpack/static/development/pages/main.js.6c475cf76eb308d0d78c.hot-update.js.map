{"version":3,"file":"static/webpack/static\\development\\pages\\main.js.6c475cf76eb308d0d78c.hot-update.js","sources":["webpack:///./pages/main.js"],"sourcesContent":["import theme from '../components/theme'\r\nimport { useState, useRef, useEffect, forwardRef } from 'react'\r\n// import ScrollCollision from 'react-scroll-collision';\r\n\r\nclass ScrollCollision extends React.PureComponent {\r\n    constructor (props){\r\n        super(props);\r\n        this.wrapperRef = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        allBlocks: null,\r\n        blockClass: null,\r\n        style:{\r\n            position: 'absolute',\r\n            top: '0',\r\n            left: '0',\r\n            right: '0',\r\n            bottom: '0'\r\n        },\r\n        originOuter: 0,\r\n        cloneOuter: 0,\r\n        base: 100,\r\n        element:{\r\n            top: 0,\r\n            bottom: 0,\r\n            height: 0\r\n        }\r\n    }\r\n  \r\n    componentDidMount = () => {\r\n        const blocks = document.querySelectorAll('[data-clippath]');\r\n        this.updateElement();\r\n \r\n        this.setState({\r\n            ...this.state,\r\n            allBlocks: blocks,\r\n            cloneOuter: this.state.base\r\n        });\r\n\r\n        window.addEventListener(\"scroll\", this.handleScroll);\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        this.updateElement();\r\n    }\r\n\r\n    handleScroll = (event) => {\r\n        \r\n        this.testCollision();\r\n    }\r\n\r\n    testCollision = () => {\r\n        const {allBlocks, element, base} = {...this.state};\r\n        for (let i = 0; i < allBlocks.length; i++) {\r\n            const block = this.getBlockInfos(allBlocks[i]);\r\n            let newOrigin = 0;\r\n            let newClone = 0;\r\n\r\n            if (element.bottom >= block.top && element.top <= block.top && this.isInBoundaries()){\r\n                newOrigin =  block.top - element.bottom;\r\n                newClone = block.top - element.top;\r\n                return this.updateOverlay(newOrigin, newClone, block.class);\r\n            }\r\n\r\n            if (element.bottom >= block.bottom && element.top <= block.bottom && this.isInBoundaries()) {\r\n                newOrigin = block.bottom - element.top;\r\n                newClone = block.bottom - element.bottom;\r\n                return this.updateOverlay(newOrigin, newClone, block.class);\r\n            }\r\n\r\n            if (element.top > block.top && element.bottom < block.bottom) return this.updateOverlay(-base, 0, block.class);\r\n        };\r\n\r\n        return this.updateOverlay(0,base,null);\r\n\r\n    }\r\n\r\n    updateElement = () => {\r\n        const newElem = this.getBlockInfos(this.wrapperRef.current);\r\n        if (this.state.element.top !== newElem.top || this.state.element.bottom !== newElem.bottom) {\r\n            const element = {\r\n                top: newElem.top,\r\n                bottom: newElem.bottom,\r\n                height: newElem.bottom - newElem.top\r\n            };\r\n            this.setState({\r\n                ...this.state,\r\n                element: element\r\n            });\r\n        }\r\n    }\r\n\r\n    updateOverlay = (origin, clone, blockClass) => {\r\n        const tempOrigin = this.getPercent(origin);\r\n        const tempClone = this.getPercent(clone);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            blockClass: blockClass,\r\n            originOuter: tempOrigin,\r\n            cloneOuter: tempClone\r\n        });\r\n    }\r\n\r\n    isInBoundaries = () => {\r\n        const {originOuter, cloneOuter, base} = {...this.state};\r\n        return originOuter <= base && originOuter >= - base && cloneOuter <= base && cloneOuter >= - base\r\n    }\r\n\r\n    getPercent = (value) => {\r\n        const {base} = {...this.state};\r\n        let percent = (value * base) / this.state.element.height;\r\n        if (percent > base) percent = base;\r\n        else if (percent < - base) percent = - base;\r\n        return percent;\r\n    }\r\n\r\n    getBlockInfos = (elem) => {\r\n        const position = elem.getBoundingClientRect();\r\n        const blockClass = elem.dataset? elem.dataset.clippath : null;\r\n        const element = {top: position.top, bottom: position.bottom, class: blockClass};\r\n      \r\n        return element;\r\n    }\r\n\r\n    render() {\r\n        \r\n        const {className, children, style} = {...this.props};\r\n        \r\n        return (\r\n            <div className={\"clippath-wrapper \" + className} ref={this.wrapperRef} style={style}>\r\n                <div className=\"clippath-origin\" style={{...this.state.style, overflow: 'hidden', transform: \"translateY(\" + this.state.originOuter +  \"%)\" }}>\r\n                    <div className=\"clippath-inner\" style={{...this.state.style, overflow: 'auto', transform: \"translateY(\" + - this.state.originOuter +  \"%)\" }}>\r\n                        <div>{children}</div>\r\n                    </div>\r\n                </div>\r\n                <div className={\"clippath-clone \" + this.state.blockClass} style={{...this.state.style, overflow: 'hidden', transform: \"translateY(\" + this.state.cloneOuter +  \"%)\" }}>\r\n                    <div className=\"clippath-inner\" style={{...this.state.style, overflow: 'auto', transform: \"translateY(\" + - this.state.cloneOuter +  \"%)\" }}>\r\n                        <div>{children}</div>\r\n                    </div>\r\n                </div>        \r\n            </div> \r\n        );\r\n    }\r\n};\r\n\r\nconst App = () => (\r\n    <div>\r\n        <ScrollCollision className=\"Elem1\">Test element fixed bottom left</ScrollCollision>\r\n        <ScrollCollision className=\"Elem2\">Top center</ScrollCollision>\r\n        <ScrollCollision className=\"Elem3\">Bottom Right</ScrollCollision>\r\n\r\n        <div className=\"Block-White\">\r\n\r\n        </div>\r\n        <div className=\"Block-Black\" data-clippath=\"ColorWhite\">\r\n\r\n        </div>\r\n        <div className=\"Block-White\">\r\n\r\n        </div>\r\n        <div className=\"Block-Black\" data-clippath=\"ColorGray\">\r\n\r\n        </div>\r\n        <div className=\"Block-White\">\r\n\r\n        </div>\r\n        <style jsx>{`\r\n            \r\n.Block-White,\r\n.Block-Black {\r\n  width: 100%;\r\n  height: 50vh;\r\n}\r\n\r\n.Block-White {\r\n  background: white;\r\n}\r\n\r\n.Block-Black {\r\n  background: black;\r\n}\r\n\r\n.ColorWhite{\r\n  color: white;\r\n  fill: white;\r\n}\r\n\r\n.ColorGray{\r\n  color: lightgray;\r\n  fill:gray;\r\n}\r\n\r\n.Elem1 {\r\n  position: fixed;\r\n  top: 25%;\r\n  left: 10%;\r\n  height: 20px;\r\n  width: 300px;\r\n}\r\n\r\n.Elem2 {\r\n  position: fixed;\r\n  top: 5%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  height: 17px;\r\n  width: 150px;\r\n}\r\n\r\n.Elem3 {\r\n  position: fixed;\r\n  top: 25%;\r\n  right: 10%;\r\n  height: 20px;\r\n  width: 150px;\r\n}\r\n\r\n.ElemSVG {\r\n  position: fixed;\r\n  top: 30%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  height: 100px;\r\n  width: 100px;\r\n}\r\n        `}\r\n        </style>\r\n    </div>\r\n)\r\n\r\n\r\nexport default App"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAbA;AACA;AANA;AA0BA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAHA;AACA;AAKA;AACA;AACA;AArCA;AAuCA;AACA;AACA;AAzCA;AA4CA;AACA;AACA;AA9CA;AA+CA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAEA;AAEA;AACA;AAxEA;AA0EA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AAEA;AAFA;AAIA;AACA;AACA;AAvFA;AAyFA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAnGA;AAoGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAxGA;AAyGA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAhHA;AAkHA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAtHA;AAFA;AAGA;AACA;;;AAqHA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AA5IA;AACA;AA4IA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;AAAA;AADA;AACA;AAqFA;;;;A","sourceRoot":""}